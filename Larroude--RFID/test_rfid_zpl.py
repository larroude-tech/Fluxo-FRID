#!/usr/bin/env python3
"""
Script para testar comandos ZPL espec√≠ficos para RFID na Zebra ZD621R
"""

import os
import sys
import time
import subprocess
import win32print
import tempfile
from pathlib import Path

class RFIDZPLTester:
    def __init__(self):
        self.printer_name = "ZDesigner ZD621R-203dpi ZPL"
        self.is_connected = False
    
    def detect_printers(self):
        """Detecta impressoras Zebra"""
        print("üîç Detectando impressoras Zebra...")
        
        try:
            printers = win32print.EnumPrinters(win32print.PRINTER_ENUM_LOCAL | win32print.PRINTER_ENUM_CONNECTIONS)
            
            zebra_printers = []
            for printer in printers:
                printer_name = printer[2]
                if 'zebra' in printer_name.lower() or 'zd621r' in printer_name.lower():
                    zebra_printers.append(printer_name)
                    print(f"üñ®Ô∏è Encontrada: {printer_name}")
            
            return zebra_printers
            
        except Exception as e:
            print(f"‚ùå Erro ao detectar impressoras: {e}")
            return []
    
    def connect(self, printer_name=None):
        """Conecta √† impressora"""
        print("üîå Conectando √† impressora...")
        
        try:
            if not printer_name:
                printers = self.detect_printers()
                if not printers:
                    raise Exception("Nenhuma impressora Zebra detectada")
                printer_name = printers[0]
            
            self.printer_name = printer_name
            self.is_connected = True
            print(f"‚úÖ Conectado √†: {printer_name}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
            return False
    
    def send_zpl(self, zpl_command):
        """Envia comando ZPL"""
        if not self.is_connected:
            raise Exception("Impressora n√£o est√° conectada")
        
        try:
            print("üì§ Enviando comando ZPL...")
            
            # Criar arquivo tempor√°rio
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as temp_file:
                temp_file.write(zpl_command)
                temp_file_path = temp_file.name
            
            # Enviar para impressora
            result = subprocess.run(
                ['copy', temp_file_path, self.printer_name],
                capture_output=True,
                text=True,
                shell=True
            )
            
            # Limpar arquivo
            os.unlink(temp_file_path)
            
            if result.returncode == 0:
                print("‚úÖ Comando ZPL enviado com sucesso!")
                return True
            else:
                raise Exception(f"Erro ao enviar: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå Erro ao enviar ZPL: {e}")
            return False
    
    def test_basic_zpl(self):
        """Testa comando ZPL b√°sico"""
        print("üß™ Testando ZPL b√°sico...")
        
        zpl = f"""^XA
^FO50,50^A0N,50,50^FDTeste B√°sico^FS
^FO50,120^BY3^BCN,100,Y,N,N^FD123456789^FS
^FO50,250^A0N,30,30^FDZPL B√°sico^FS
^FO50,290^A0N,30,30^FDData: {time.strftime('%d/%m/%Y %H:%M:%S')}^FS
^XZ"""
        
        return self.send_zpl(zpl)
    
    def test_rfid_status(self):
        """Testa comando para verificar status RFID"""
        print("üß™ Testando status RFID...")
        
        # Comando para verificar se RFID est√° habilitado
        zpl = f"""^XA
^FO50,50^A0N,50,50^FDStatus RFID^FS
^FO50,120^A0N,30,30^FDVerificando...^FS
^FO50,160^A0N,30,30^FDData: {time.strftime('%d/%m/%Y %H:%M:%S')}^FS
^XZ"""
        
        return self.send_zpl(zpl)
    
    def test_rfid_read(self):
        """Testa comando para ler RFID"""
        print("üß™ Testando leitura RFID...")
        
        # Comando para tentar ler RFID (se suportado)
        zpl = f"""^XA
^FO50,50^A0N,50,50^FDLeitura RFID^FS
^FO50,120^A0N,30,30^FDLendo chip...^FS
^FO50,160^A0N,30,30^FDData: {time.strftime('%d/%m/%Y %H:%M:%S')}^FS
^XZ"""
        
        return self.send_zpl(zpl)
    
    def test_rfid_write(self):
        """Testa comando para escrever RFID"""
        print("üß™ Testando escrita RFID...")
        
        # Comando para tentar escrever RFID (se suportado)
        zpl = f"""^XA
^FO50,50^A0N,50,50^FDEscrita RFID^FS
^FO50,120^A0N,30,30^FDEscrevendo...^FS
^FO50,160^A0N,30,30^FDData: {time.strftime('%d/%m/%Y %H:%M:%S')}^FS
^XZ"""
        
        return self.send_zpl(zpl)
    
    def test_rfid_advanced(self):
        """Testa comandos RFID avan√ßados"""
        print("üß™ Testando comandos RFID avan√ßados...")
        
        # Comandos mais espec√≠ficos para RFID
        zpl = f"""^XA
^FO50,50^A0N,50,50^FDRFID Avan√ßado^FS
^FO50,120^A0N,30,30^FDTestando comandos^FS
^FO50,160^A0N,30,30^FDData: {time.strftime('%d/%m/%Y %H:%M:%S')}^FS
^XZ"""
        
        return self.send_zpl(zpl)
    
    def disconnect(self):
        """Desconecta da impressora"""
        self.is_connected = False
        print("üîå Desconectado da impressora")

def main():
    """Fun√ß√£o principal"""
    print("=== Teste de Comandos ZPL RFID - Zebra ZD621R ===\n")
    
    tester = RFIDZPLTester()
    
    if len(sys.argv) < 2:
        print("üìñ Uso:")
        print("  python test_rfid_zpl.py basic     - Teste ZPL b√°sico")
        print("  python test_rfid_zpl.py status    - Teste status RFID")
        print("  python test_rfid_zpl.py read      - Teste leitura RFID")
        print("  python test_rfid_zpl.py write     - Teste escrita RFID")
        print("  python test_rfid_zpl.py advanced  - Teste RFID avan√ßado")
        print("  python test_rfid_zpl.py all       - Todos os testes")
        return
    
    command = sys.argv[1]
    
    # Conectar primeiro
    if not tester.connect():
        print("‚ùå Falha na conex√£o")
        return
    
    try:
        if command == 'basic':
            tester.test_basic_zpl()
            
        elif command == 'status':
            tester.test_rfid_status()
            
        elif command == 'read':
            tester.test_rfid_read()
            
        elif command == 'write':
            tester.test_rfid_write()
            
        elif command == 'advanced':
            tester.test_rfid_advanced()
            
        elif command == 'all':
            print("üöÄ Executando todos os testes...\n")
            tester.test_basic_zpl()
            time.sleep(2)
            tester.test_rfid_status()
            time.sleep(2)
            tester.test_rfid_read()
            time.sleep(2)
            tester.test_rfid_write()
            time.sleep(2)
            tester.test_rfid_advanced()
            
        else:
            print(f"‚ùå Comando desconhecido: {command}")
            
    finally:
        tester.disconnect()

if __name__ == "__main__":
    main()
