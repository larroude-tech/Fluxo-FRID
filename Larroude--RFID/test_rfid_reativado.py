#!/usr/bin/env python3
"""
Teste do RFID reativado
"""

import requests
import json

def test_rfid_writing():
    """Testa se o RFID est√° sendo gravado corretamente"""
    print("üì° Testando grava√ß√£o RFID reativada...")
    
    # Dados de teste baseados no exemplo fornecido
    test_data = [
        {
            "STYLE_NAME": "TESTE RFID",
            "VPM": "L464-TESTE-5.0-WHIT-1120",
            "COLOR": "WHITE",
            "SIZE": "5.0",
            "QTY": 3,
            "BARCODE": "197416145132",
            "PO": "464"
        }
    ]
    
    print("üìù Dados de teste:")
    print(f"   Produto: {test_data[0]['STYLE_NAME']}")
    print(f"   PO: PO{test_data[0]['PO']}")
    print(f"   Barcode: {test_data[0]['BARCODE']}")
    print(f"   Quantidade: {test_data[0]['QTY']}")
    print()
    
    print("üìä Tags RFID esperadas:")
    barcode = test_data[0]['BARCODE']
    po = test_data[0]['PO']
    for i in range(1, test_data[0]['QTY'] + 1):
        expected_rfid = f"{barcode}{po}{i}"
        print(f"   Etiqueta {i}: {expected_rfid}")
    
    try:
        print("\nüì° Enviando para API com RFID reativado...")
        response = requests.post(
            "http://localhost:3002/api/print-individual",
            json={"data": test_data, "quantity": test_data[0]['QTY']},
            timeout=25
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ API respondeu com sucesso!")
            print(f"   Mensagem: {result.get('message', 'N/A')}")
            
            if 'results' in result and len(result['results']) > 0:
                print("\nüìä Resultados da impress√£o:")
                success_count = 0
                error_count = 0
                rfid_errors = 0
                
                for i, res in enumerate(result['results'], 1):
                    success = res.get('success', False)
                    expected_rfid = f"{barcode}{po}{i}"
                    actual_rfid = res.get('rfid', 'N/A')
                    
                    if success:
                        success_count += 1
                        status = "‚úÖ"
                    else:
                        error_count += 1
                        status = "‚ùå"
                        
                        # Verificar se √© erro de RFID
                        message = res.get('message', '').lower()
                        if 'rfid' in message or 'tag' in message:
                            rfid_errors += 1
                    
                    print(f"   {i}. {status} {res.get('item', 'N/A')}")
                    print(f"      Barcode: {res.get('barcode', 'N/A')}")
                    print(f"      RFID esperado: {expected_rfid}")
                    print(f"      RFID enviado: {actual_rfid}")
                    
                    if not success:
                        print(f"      Erro: {res.get('message', 'Erro desconhecido')}")
                    print()
                
                print(f"üìà Resumo: {success_count} sucessos, {error_count} erros")
                
                if rfid_errors > 0:
                    print(f"‚ö†Ô∏è {rfid_errors} erros relacionados ao RFID")
                    return "rfid_error"
                elif error_count == 0:
                    print("‚úÖ TODAS AS ETIQUETAS COM RFID PROCESSADAS!")
                    return "success"
                else:
                    print("‚ùå Erros n√£o relacionados ao RFID")
                    return "other_error"
            else:
                print("‚ö†Ô∏è Nenhum resultado detalhado retornado")
                return "no_results"
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return "http_error"
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Servidor backend n√£o est√° rodando")
        return "connection_error"
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return "test_error"

def show_rfid_reactivation():
    """Mostra o que foi reativado"""
    print("\nüîß RFID REATIVADO:")
    
    print("\n‚úÖ COMANDO RFID RESTAURADO:")
    print("   Template ZPL: ^RFW,H^FD{RFID_DATA}^FS")
    print("   Servidor: .replace('{RFID_DATA}', rfidContent)")
    print("   Dados: barcode + PO(n√∫meros) + sequencial")
    
    print("\nüì° FORMATO DA TAG RFID:")
    print("   rfidContent = `${baseBarcode}${poNumber}${seq}`")
    print("   ‚Ä¢ baseBarcode: 12 primeiros d√≠gitos do barcode")
    print("   ‚Ä¢ poNumber: apenas n√∫meros do PO (sem 'PO')")
    print("   ‚Ä¢ seq: n√∫mero sequencial (1, 2, 3...)")
    
    print("\nüìã EXEMPLO:")
    print("   Barcode: 197416145132")
    print("   PO: 464")
    print("   Sequencial: 1, 2, 3")
    print("   Tags RFID:")
    print("   ‚îú‚îÄ Etiqueta 1: 1974161451324641")
    print("   ‚îú‚îÄ Etiqueta 2: 1974161451324642")
    print("   ‚îî‚îÄ Etiqueta 3: 1974161451324643")

def show_troubleshooting():
    """Mostra solu√ß√µes para problemas de RFID"""
    print("\nüîß SOLU√á√ÉO DE PROBLEMAS RFID:")
    
    print("\n1. üè∑Ô∏è VERIFICAR TAG RFID:")
    print("   ‚Ä¢ Certifique-se que h√° uma tag RFID na impressora")
    print("   ‚Ä¢ Tag deve estar posicionada corretamente")
    print("   ‚Ä¢ Tag deve ser compat√≠vel com a impressora")
    
    print("\n2. ‚öôÔ∏è CONFIGURA√á√ÉO DA IMPRESSORA:")
    print("   ‚Ä¢ Impressora deve suportar RFID")
    print("   ‚Ä¢ M√≥dulo RFID deve estar ativo")
    print("   ‚Ä¢ Verificar configura√ß√µes de RFID")
    
    print("\n3. üß™ TESTE MANUAL:")
    print("   ‚Ä¢ Testar comando ZPL simples:")
    print("   ‚Ä¢ ^XA^RFW,H^FD123456^FS^XZ")
    print("   ‚Ä¢ Se funcionar, problema √© no formato dos dados")
    
    print("\n4. üìù FORMATO DOS DADOS:")
    print("   ‚Ä¢ RFID deve ter formato v√°lido")
    print("   ‚Ä¢ Verificar se n√£o h√° caracteres especiais")
    print("   ‚Ä¢ Tamanho dos dados deve ser adequado")

def show_next_steps(result):
    """Mostra pr√≥ximos passos baseado no resultado"""
    print("\nüîÆ PR√ìXIMOS PASSOS:")
    
    if result == "success":
        print("\n‚úÖ RFID FUNCIONANDO:")
        print("   ‚Ä¢ Sistema est√° gravando RFID corretamente")
        print("   ‚Ä¢ Continue usando normalmente")
        print("   ‚Ä¢ Cada etiqueta tem tag √∫nica")
        
    elif result == "rfid_error":
        print("\n‚ö†Ô∏è ERRO DE RFID:")
        print("   ‚Ä¢ Verificar se h√° tag RFID na impressora")
        print("   ‚Ä¢ Conferir configura√ß√µes da impressora")
        print("   ‚Ä¢ Testar com tag RFID diferente")
        print("   ‚Ä¢ Se necess√°rio, desabilitar temporariamente")
        
    elif result == "connection_error":
        print("\nüîÑ REINICIAR BACKEND:")
        print("   ‚Ä¢ cd backend && npm start")
        print("   ‚Ä¢ Aguardar servidor iniciar")
        print("   ‚Ä¢ Testar novamente")
        
    else:
        print("\nüîç INVESTIGAR PROBLEMA:")
        print("   ‚Ä¢ Verificar logs do backend")
        print("   ‚Ä¢ Testar com dados mais simples")
        print("   ‚Ä¢ Verificar conex√£o com impressora")

if __name__ == "__main__":
    print("=== TESTE RFID REATIVADO ===")
    print("Verificando se RFID est√° sendo gravado corretamente\n")
    
    # Mostrar o que foi reativado
    show_rfid_reactivation()
    
    # Testar grava√ß√£o RFID
    result = test_rfid_writing()
    
    # Mostrar solu√ß√µes se necess√°rio
    if result == "rfid_error":
        show_troubleshooting()
    
    # Mostrar pr√≥ximos passos
    show_next_steps(result)
    
    print("\n" + "="*60)
    print("üéØ RESULTADO:")
    
    if result == "success":
        print("‚úÖ RFID REATIVADO E FUNCIONANDO!")
        print("‚úÖ Tags sendo gravadas corretamente")
        print("‚úÖ Formato: barcode + PO + sequencial")
        print("‚úÖ Cada etiqueta tem RFID √∫nico")
        
    elif result == "rfid_error":
        print("‚ö†Ô∏è RFID REATIVADO MAS COM ERROS")
        print("‚ö†Ô∏è Impressora pode n√£o ter tag RFID")
        print("üí° Verificar configura√ß√£o da impressora")
        print("üí° Inserir tag RFID se necess√°rio")
        
    else:
        print("‚ùå Problemas no teste de RFID")
        print("üí° Verificar backend e conex√µes")
    
    print("\nüì° RFID REATIVADO! üì°")


