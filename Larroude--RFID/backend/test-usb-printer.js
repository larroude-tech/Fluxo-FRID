#!/usr/bin/env node

const USBPrinterConnection = require('./usb-printer-connection');

async function main() {
    console.log('=== Teste de Conex√£o USB com Impressora RFID Zebra ZD621R ===\n');
    
    const usbConnection = new USBPrinterConnection();
    
    // Op√ß√µes de teste
    const args = process.argv.slice(2);
    const command = args[0];
    
    switch (command) {
        case 'list':
            console.log('üîç Listando portas seriais dispon√≠veis...\n');
            try {
                const { allPorts, printerPorts } = await usbConnection.listPorts();
                console.log(`\nüìä Resumo:`);
                console.log(`   Total de portas: ${allPorts.length}`);
                console.log(`   Poss√≠veis impressoras: ${printerPorts.length}`);
                
                if (printerPorts.length > 0) {
                    console.log('\nüñ®Ô∏è Impressoras detectadas:');
                    printerPorts.forEach((printer, index) => {
                        console.log(`   ${index + 1}. ${printer.path} - ${printer.manufacturer || 'Desconhecido'}`);
                    });
                }
            } catch (error) {
                console.error('‚ùå Erro ao listar portas:', error.message);
            }
            break;
            
        case 'connect':
            const portPath = args[1];
            if (!portPath) {
                console.error('‚ùå Erro: Caminho da porta √© obrigat√≥rio');
                console.log('Uso: node test-usb-printer.js connect <porta>');
                console.log('Exemplo: node test-usb-printer.js connect COM3');
                process.exit(1);
            }
            
            try {
                console.log(`üîå Conectando √† porta ${portPath}...`);
                await usbConnection.connect(portPath);
                
                console.log('\nüß™ Testando conectividade...');
                const testResult = await usbConnection.testConnection();
                
                if (testResult.success) {
                    console.log('‚úÖ Teste de conectividade: OK');
                    console.log('‚úÖ Comando de teste enviado com sucesso');
                } else {
                    console.log('‚ùå Teste de conectividade: FALHOU');
                    console.log(`   Erro: ${testResult.error}`);
                }
                
                // Desconectar
                await usbConnection.disconnect();
                
            } catch (error) {
                console.error('‚ùå Erro na conex√£o:', error.message);
            }
            break;
            
        case 'auto':
            try {
                console.log('üîç Auto-detectando e conectando √† impressora...\n');
                const result = await usbConnection.autoConnect();
                
                console.log('‚úÖ Auto-conex√£o bem-sucedida!');
                console.log(`   Porta: ${result.port.path}`);
                console.log(`   Fabricante: ${result.port.manufacturer || 'Desconhecido'}`);
                console.log(`   Mensagem: ${result.message}`);
                
                console.log('\nüß™ Testando conectividade...');
                const testResult = await usbConnection.testConnection();
                
                if (testResult.success) {
                    console.log('‚úÖ Teste de conectividade: OK');
                    console.log('‚úÖ Comando de teste enviado com sucesso');
                } else {
                    console.log('‚ùå Teste de conectividade: FALHOU');
                    console.log(`   Erro: ${testResult.error}`);
                }
                
                // Desconectar
                await usbConnection.disconnect();
                
            } catch (error) {
                console.error('‚ùå Erro na auto-conex√£o:', error.message);
            }
            break;
            
        case 'test':
            const testPort = args[1];
            if (!testPort) {
                console.error('‚ùå Erro: Caminho da porta √© obrigat√≥rio');
                console.log('Uso: node test-usb-printer.js test <porta>');
                process.exit(1);
            }
            
            try {
                console.log(`üîå Conectando √† porta ${testPort}...`);
                await usbConnection.connect(testPort);
                
                console.log('\nüß™ Executando teste completo...');
                const testResult = await usbConnection.testConnection();
                
                console.log('\nüìä Resultados do Teste:');
                console.log('='.repeat(50));
                
                if (testResult.success) {
                    console.log('‚úÖ Status da Conex√£o: OK');
                    console.log(`   Porta: ${testResult.connectionInfo.portPath}`);
                    console.log('‚úÖ Comando de Teste: OK');
                    console.log('‚úÖ Impressora USB: FUNCIONANDO');
                } else {
                    console.log('‚ùå Status da Conex√£o: FALHOU');
                    console.log(`   Erro: ${testResult.error}`);
                }
                
                // Desconectar
                await usbConnection.disconnect();
                
            } catch (error) {
                console.error('‚ùå Erro no teste:', error.message);
            }
            break;
            
        case 'send':
            const sendPort = args[1];
            const zplCommand = args[2];
            
            if (!sendPort || !zplCommand) {
                console.error('‚ùå Erro: Porta e comando ZPL s√£o obrigat√≥rios');
                console.log('Uso: node test-usb-printer.js send <porta> <comando_zpl>');
                console.log('Exemplo: node test-usb-printer.js send COM3 "^XA^FO50,50^A0N,50,50^FDTeste^FS^XZ"');
                process.exit(1);
            }
            
            try {
                console.log(`üîå Conectando √† porta ${sendPort}...`);
                await usbConnection.connect(sendPort);
                
                console.log('\nüì§ Enviando comando ZPL...');
                await usbConnection.sendZPL(zplCommand);
                console.log('‚úÖ Comando ZPL enviado com sucesso!');
                
                // Desconectar
                await usbConnection.disconnect();
                
            } catch (error) {
                console.error('‚ùå Erro ao enviar ZPL:', error.message);
            }
            break;
            
        case 'help':
        default:
            console.log('üìñ Uso do Testador de Impressora USB:');
            console.log('='.repeat(50));
            console.log('\nComandos dispon√≠veis:');
            console.log('\n  list                        - Lista todas as portas seriais');
            console.log('  connect <porta>             - Conecta √† porta espec√≠fica');
            console.log('  auto                        - Auto-detecta e conecta √† impressora');
            console.log('  test <porta>                - Testa conectividade completa');
            console.log('  send <porta> <zpl>          - Envia comando ZPL espec√≠fico');
            console.log('  help                        - Mostra esta ajuda');
            
            console.log('\nExemplos:');
            console.log('  node test-usb-printer.js list');
            console.log('  node test-usb-printer.js connect COM3');
            console.log('  node test-usb-printer.js auto');
            console.log('  node test-usb-printer.js test COM3');
            console.log('  node test-usb-printer.js send COM3 "^XA^FO50,50^A0N,50,50^FDTeste^FS^XZ"');
            
            console.log('\nüìã Informa√ß√µes:');
            console.log('  - Baud rate padr√£o: 9600');
            console.log('  - Data bits: 8');
            console.log('  - Stop bits: 1');
            console.log('  - Parity: none');
            console.log('  - Timeout de conex√£o: 5 segundos');
            console.log('  - Timeout de envio: 10 segundos');
            break;
    }
}

// Tratamento de erros
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Erro n√£o tratado:', reason);
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Exce√ß√£o n√£o capturada:', error);
    process.exit(1);
});

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Erro durante execu√ß√£o:', error);
        process.exit(1);
    });
}

module.exports = main;
